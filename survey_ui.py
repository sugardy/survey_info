#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.3 on Tue Jul  9 20:58:15 2019
#

import wx
import win32api
import sys, os

APP_ICON = 'res/survey.ico' # 请更换成你的icon

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1000, 750))
        
        # Menu Bar
        self.mbMain = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"\u6253\u5f00\u5de5\u4f5c\u533a\tCtrl+O", "")
        self.Bind(wx.EVT_MENU, self.OnOpen, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"\u4fdd\u5b58\u5de5\u4f5c\u533a\tCtrl+S", "")
        self.Bind(wx.EVT_MENU, self.OnSave, id=item.GetId())
        wxglade_tmp_menu.AppendSeparator()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"\u52a0\u8f7d\u6570\u636e\u76ee\u5f55\tAlt+&L", "")
        self.Bind(wx.EVT_MENU, self.OnLoadDirectory, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"\u52a0\u8f7d\u6570\u636e\u6587\u4ef6\tCtrl+L", "")
        self.Bind(wx.EVT_MENU, self.OnLoadFile, id=item.GetId())
        wxglade_tmp_menu.AppendSeparator()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"\u5173\u95ed\u5de5\u4f5c\u533a\tCtrl+W", "")
        self.Bind(wx.EVT_MENU, self.OnClose, id=item.GetId())
        wxglade_tmp_menu.AppendSeparator()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"\u9000\u51fa\tCtrl+Q", "")
        self.Bind(wx.EVT_MENU, self.OnExit, id=item.GetId())
        self.mbMain.Append(wxglade_tmp_menu, u"\u6587\u4ef6")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"\u5bfc\u51fa\u683c\u5f0f\u6570\u636e\tAlt+&E", "")
        self.Bind(wx.EVT_MENU, self.OnExport, id=item.GetId())
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_ANY, u"\u7ba1\u7406\u6a21\u677f\u6587\u4ef6\tAlt+&M", "")
        self.mbMain.Append(wxglade_tmp_menu, u"\u7f16\u8f91")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"\u5173\u4e8e", "")
        self.Bind(wx.EVT_MENU, self.OnInfo, id=item.GetId())
        self.mbMain.Append(wxglade_tmp_menu, u"\u5e2e\u52a9")
        self.SetMenuBar(self.mbMain)
        # Menu Bar end
        self.frm_statusbar = self.CreateStatusBar(1)
        self.ch_load = wx.Choice(self, wx.ID_ANY, choices=[u"\u52a0\u8f7d\u6570\u636e\u76ee\u5f55", u"\u52a0\u8f7d\u6570\u636e\u6587\u4ef6"])
        self.tc_datapath = wx.TextCtrl(self, wx.ID_ANY, u"\u8bf7\u9009\u62e9\u6570\u636e\u8def\u5f84...", style=wx.TE_READONLY)
        self.btn_month = wx.Button(self, wx.ID_ANY, u"1\u6708")
        self.cb_month = wx.CheckBox(self, wx.ID_ANY, u"2\u6708")
        self.btn_summary = wx.Button(self, wx.ID_ANY, u"\u63cf\u8ff0")
        self.btn_trend = wx.Button(self, wx.ID_ANY, u"\u8d8b\u52bf")
        self.btn_export = wx.Button(self, wx.ID_ANY, u"\u5bfc\u51fa")
        self.tc_output = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.pl_lpr = wx.Panel(self, wx.ID_ANY)
        self.pl_ur = wx.Panel(self, wx.ID_ANY)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHOICE, self.OnLoad, self.ch_load)
        self.Bind(wx.EVT_BUTTON, self.OnSummary, self.btn_summary)
        self.Bind(wx.EVT_BUTTON, self.OnShowTrend, self.btn_trend)
        self.Bind(wx.EVT_BUTTON, self.OnExport, self.btn_export)
        # end wxGlade

    def __set_properties(self):
        # 以下代码处理图标
        if hasattr(sys, "frozen") and getattr(sys, "frozen") == "windows_exe":
            exeName = win32api.GetModuleFileName(win32api.GetModuleHandle(None))
            icon = wx.Icon(exeName, wx.BITMAP_TYPE_ICO)
        else:
            icon = wx.Icon(APP_ICON, wx.BITMAP_TYPE_ICO)
        self.SetIcon(icon)

        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("frame")
        self.frm_statusbar.SetStatusWidths([-1])
        
        # statusbar fields
        frm_statusbar_fields = ["frm_statusbar"]
        for i in range(len(frm_statusbar_fields)):
            self.frm_statusbar.SetStatusText(frm_statusbar_fields[i], i)
        self.ch_load.SetSelection(0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        bs_main = wx.BoxSizer(wx.HORIZONTAL)
        bs_right = wx.BoxSizer(wx.VERTICAL)
        bs_left = wx.BoxSizer(wx.VERTICAL)
        bs_btn = wx.BoxSizer(wx.HORIZONTAL)
        bs_data = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, u"\u6570\u636e"), wx.HORIZONTAL)
        bs_load = wx.BoxSizer(wx.HORIZONTAL)
        bs_load.Add(self.ch_load, 0, wx.ALL, 3)
        bs_load.Add(self.tc_datapath, 3, wx.ALL, 3)
        bs_left.Add(bs_load, 0, wx.ALL | wx.EXPAND, 5)
        bs_data.Add(self.btn_month, 0, wx.FIXED_MINSIZE, 0)
        bs_data.Add(self.cb_month, 0, wx.ALIGN_CENTER, 0)
        bs_left.Add(bs_data, 0, wx.ALL | wx.EXPAND, 5)
        bs_btn.Add(self.btn_summary, 1, wx.ALIGN_CENTER | wx.ALL, 3)
        bs_btn.Add(self.btn_trend, 1, wx.ALIGN_CENTER | wx.ALL, 3)
        bs_btn.Add(self.btn_export, 1, wx.ALIGN_CENTER | wx.ALL, 3)
        bs_left.Add(bs_btn, 0, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 5)
        bs_left.Add(self.tc_output, 4, wx.ALL | wx.EXPAND, 5)
        bs_main.Add(bs_left, 2, wx.ALL | wx.EXPAND, 3)
        bs_right.Add(self.pl_lpr, 1, wx.ALL | wx.EXPAND, 5)
        bs_right.Add(self.pl_ur, 1, wx.ALL | wx.EXPAND, 5)
        bs_main.Add(bs_right, 3, wx.ALL | wx.EXPAND, 3)
        self.SetSizer(bs_main)
        self.Layout()
        # end wxGlade

    # 加载数据
    def OnLoad(self, event):  # wxGlade: MainFrame.<event_handler>
        if event.Selection == 0:
            self.OnLoadDirectory(event)
        else:
            self.OnLoadFile(event)

        event.Skip()

    # 加载数据目录
    def OnLoadDirectory(self, event):  # wxGlade: MainFrame.<event_handler>
        dlg = wx.DirDialog(self,u"选择数据目录",style=wx.DD_DEFAULT_STYLE)
        if dlg.ShowModal() == wx.ID_OK:
            self.tc_output.SetLabelText(dlg.GetPath()) 

        event.Skip()

    # 加载数据文件
    def OnLoadFile(self, event):  # wxGlade: MainFrame.<event_handler>
        filesFilter = "表格 (*.xls;*.xlsx)|*.xlsx;*.xls"
        dlg = wx.FileDialog(
            self, message="选择数据文件", wildcard=filesFilter, style=wx.FD_OPEN|wx.FD_MULTIPLE)
        if dlg.ShowModal() ==  wx.ID_OK:
            path = dlg.GetFilenames()
            self.tc_output.SetLabelText(' '.join(path))

        event.Skip()

    # 数据概览
    def OnSummary(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnSummary' not implemented!")
        event.Skip()

    # 数据趋势展示
    def OnShowTrend(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnShowTrend' not implemented!")
        event.Skip()

    # 根据模板导出数据
    def OnExport(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnExport' not implemented!")
        event.Skip()

    # 打开工作区
    def OnOpen(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnOpen' not implemented!")
        event.Skip()

    # 保存工作区
    def OnSave(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnSave' not implemented!")
        event.Skip()

    def OnClose(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnClose' not implemented!")
        event.Skip()

    def OnExit(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnExit' not implemented!")
        event.Skip()
        
    def OnInfo(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'OnInfo' not implemented!")
        event.Skip()
# end of class MainFrame


class MainApp(wx.App):
    def OnInit(self):
        self.frm = MainFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frm)
        self.frm.Show()
        return True
# end of class MainApp


if __name__ == "__main__":
    app = MainApp(0)
    app.MainLoop()
